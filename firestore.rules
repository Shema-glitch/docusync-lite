rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can create their own user document
      allow create: if isSignedIn() && request.auth.uid == userId;
      // A user can read, update their own user document
      allow read, update: if isSignedIn() && request.auth.uid == userId;
    }

    // Rules for the 'documents' collection
    match /documents/{docId} {
      // Helper function to check the user's role for the document
      function getRole(userId) {
        return resource.data.members[userId].role;
      }
      
      // CREATE: A user can create a document if they are signed in and
      // they are making themselves the owner in the new document.
      allow create: if isSignedIn() &&
                       request.resource.data.members[request.auth.uid].role == 'owner';

      // READ: A user can read a document if they are signed in and
      // their user ID is in the 'members' map.
      allow read: if isSignedIn() && request.auth.uid in resource.data.members;

      // UPDATE: A user can update a document if they are signed in and
      // their role is 'owner' or 'editor'.
      allow update: if isSignedIn() && getRole(request.auth.uid) in ['owner', 'editor'];

      // DELETE: A user can delete a document if they are signed in and
      // their role is 'owner'.
      allow delete: if isSignedIn() && getRole(request.auth.uid) == 'owner';
    }
  }
}
