rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is a member of a document
    function isMember(docId, userId) {
      return get(/databases/$(database)/documents/documents/$(docId)).data.members[userId] != null;
    }
    
    // Helper function to check the user's role
    function getRole(docId, userId) {
      return get(/databases/$(database)/documents/documents/$(docId)).data.members[userId].role;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to create their own user document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow users to read and update their own user document
      allow read, update: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'documents' collection
    match /documents/{docId} {
      // READ: Allow if the user is a member of the document.
      allow read: if request.auth != null && isMember(docId, request.auth.uid);
      
      // CREATE: Allow if the user is authenticated and they are setting themselves as the owner.
      allow create: if request.auth != null && request.resource.data.members[request.auth.uid].role == 'owner';
      
      // UPDATE: Allow if the user is an 'owner' or 'editor'.
      // Additionally, the owner cannot be removed, and their role cannot be changed.
      allow update: if request.auth != null && 
                      (getRole(docId, request.auth.uid) == 'owner' || getRole(docId, request.auth.uid) == 'editor') &&
                      // Ensure the owner is not removed from the members map
                      request.resource.data.members[resource.data.members.keys().filter(key => resource.data.members[key].role == 'owner')[0]] != null &&
                      // Ensure the owner's role is not changed
                      request.resource.data.members.values().filter(member => member.role == 'owner').size() == 1;

      // DELETE: Allow only if the user is the owner.
      allow delete: if request.auth != null && getRole(docId, request.auth.uid) == 'owner';
    }
  }
}
